// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mgw/mgw.proto

/*
Package mgw is a generated protocol buffer package.

It is generated from these files:
	mgw/mgw.proto

It has these top-level messages:
	MsgReq
	MsgRsp
	MgwRequest
	MgwEvent
	MsgDelivery
*/
package mgw

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import base "github.com/totoview/xin/pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MgwRequest_Type int32

const (
	MgwRequest_Unknown MgwRequest_Type = 0
	MgwRequest_MsgReq  MgwRequest_Type = 1
)

var MgwRequest_Type_name = map[int32]string{
	0: "Unknown",
	1: "MsgReq",
}
var MgwRequest_Type_value = map[string]int32{
	"Unknown": 0,
	"MsgReq":  1,
}

func (x MgwRequest_Type) String() string {
	return proto.EnumName(MgwRequest_Type_name, int32(x))
}
func (MgwRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type MgwEvent_Type int32

const (
	MgwEvent_Unknown     MgwEvent_Type = 0
	MgwEvent_MsgDelivery MgwEvent_Type = 10
)

var MgwEvent_Type_name = map[int32]string{
	0:  "Unknown",
	10: "MsgDelivery",
}
var MgwEvent_Type_value = map[string]int32{
	"Unknown":     0,
	"MsgDelivery": 10,
}

func (x MgwEvent_Type) String() string {
	return proto.EnumName(MgwEvent_Type_name, int32(x))
}
func (MgwEvent_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Message request
type MsgReq struct {
	Id      string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	App     string          `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Session *base.Session   `protobuf:"bytes,3,opt,name=session" json:"session,omitempty"`
	Msg     *base.MsgData   `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
	From    *base.MsgAddr   `protobuf:"bytes,5,opt,name=from" json:"from,omitempty"`
	To      []*base.MsgAddr `protobuf:"bytes,6,rep,name=to" json:"to,omitempty"`
}

func (m *MsgReq) Reset()                    { *m = MsgReq{} }
func (m *MsgReq) String() string            { return proto.CompactTextString(m) }
func (*MsgReq) ProtoMessage()               {}
func (*MsgReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgReq) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *MsgReq) GetSession() *base.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *MsgReq) GetMsg() *base.MsgData {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *MsgReq) GetFrom() *base.MsgAddr {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MsgReq) GetTo() []*base.MsgAddr {
	if m != nil {
		return m.To
	}
	return nil
}

// Response for MsgReq
type MsgRsp struct {
	Id      string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	App     string        `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Session *base.Session `protobuf:"bytes,3,opt,name=session" json:"session,omitempty"`
	ErrCode int32         `protobuf:"zigzag32,4,opt,name=errCode" json:"errCode,omitempty"`
	ErrMsg  string        `protobuf:"bytes,5,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *MsgRsp) Reset()                    { *m = MsgRsp{} }
func (m *MsgRsp) String() string            { return proto.CompactTextString(m) }
func (*MsgRsp) ProtoMessage()               {}
func (*MsgRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgRsp) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgRsp) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *MsgRsp) GetSession() *base.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *MsgRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *MsgRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type MgwRequest struct {
	Type    MgwRequest_Type `protobuf:"varint,1,opt,name=type,enum=MgwRequest_Type" json:"type,omitempty"`
	TsNanos uint64          `protobuf:"varint,2,opt,name=tsNanos" json:"tsNanos,omitempty"`
	MsgReq  *MsgReq         `protobuf:"bytes,3,opt,name=msgReq" json:"msgReq,omitempty"`
}

func (m *MgwRequest) Reset()                    { *m = MgwRequest{} }
func (m *MgwRequest) String() string            { return proto.CompactTextString(m) }
func (*MgwRequest) ProtoMessage()               {}
func (*MgwRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MgwRequest) GetType() MgwRequest_Type {
	if m != nil {
		return m.Type
	}
	return MgwRequest_Unknown
}

func (m *MgwRequest) GetTsNanos() uint64 {
	if m != nil {
		return m.TsNanos
	}
	return 0
}

func (m *MgwRequest) GetMsgReq() *MsgReq {
	if m != nil {
		return m.MsgReq
	}
	return nil
}

// An event
type MgwEvent struct {
	Type        MgwEvent_Type `protobuf:"varint,1,opt,name=type,enum=MgwEvent_Type" json:"type,omitempty"`
	TsNanos     uint64        `protobuf:"varint,2,opt,name=tsNanos" json:"tsNanos,omitempty"`
	MsgDelivery *MsgDelivery  `protobuf:"bytes,10,opt,name=msgDelivery" json:"msgDelivery,omitempty"`
}

func (m *MgwEvent) Reset()                    { *m = MgwEvent{} }
func (m *MgwEvent) String() string            { return proto.CompactTextString(m) }
func (*MgwEvent) ProtoMessage()               {}
func (*MgwEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MgwEvent) GetType() MgwEvent_Type {
	if m != nil {
		return m.Type
	}
	return MgwEvent_Unknown
}

func (m *MgwEvent) GetTsNanos() uint64 {
	if m != nil {
		return m.TsNanos
	}
	return 0
}

func (m *MgwEvent) GetMsgDelivery() *MsgDelivery {
	if m != nil {
		return m.MsgDelivery
	}
	return nil
}

// A message delivery event.
type MsgDelivery struct {
	Req    *MsgReq                   `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Report []*base.MsgDeliveryReport `protobuf:"bytes,2,rep,name=report" json:"report,omitempty"`
}

func (m *MsgDelivery) Reset()                    { *m = MsgDelivery{} }
func (m *MsgDelivery) String() string            { return proto.CompactTextString(m) }
func (*MsgDelivery) ProtoMessage()               {}
func (*MsgDelivery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MsgDelivery) GetReq() *MsgReq {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *MsgDelivery) GetReport() []*base.MsgDeliveryReport {
	if m != nil {
		return m.Report
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgReq)(nil), "MsgReq")
	proto.RegisterType((*MsgRsp)(nil), "MsgRsp")
	proto.RegisterType((*MgwRequest)(nil), "MgwRequest")
	proto.RegisterType((*MgwEvent)(nil), "MgwEvent")
	proto.RegisterType((*MsgDelivery)(nil), "MsgDelivery")
	proto.RegisterEnum("MgwRequest_Type", MgwRequest_Type_name, MgwRequest_Type_value)
	proto.RegisterEnum("MgwEvent_Type", MgwEvent_Type_name, MgwEvent_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MGW service

type MGWClient interface {
	// send new messages
	Send(ctx context.Context, opts ...grpc.CallOption) (MGW_SendClient, error)
}

type mGWClient struct {
	cc *grpc.ClientConn
}

func NewMGWClient(cc *grpc.ClientConn) MGWClient {
	return &mGWClient{cc}
}

func (c *mGWClient) Send(ctx context.Context, opts ...grpc.CallOption) (MGW_SendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MGW_serviceDesc.Streams[0], c.cc, "/MGW/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &mGWSendClient{stream}
	return x, nil
}

type MGW_SendClient interface {
	Send(*MsgReq) error
	Recv() (*MsgRsp, error)
	grpc.ClientStream
}

type mGWSendClient struct {
	grpc.ClientStream
}

func (x *mGWSendClient) Send(m *MsgReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mGWSendClient) Recv() (*MsgRsp, error) {
	m := new(MsgRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MGW service

type MGWServer interface {
	// send new messages
	Send(MGW_SendServer) error
}

func RegisterMGWServer(s *grpc.Server, srv MGWServer) {
	s.RegisterService(&_MGW_serviceDesc, srv)
}

func _MGW_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MGWServer).Send(&mGWSendServer{stream})
}

type MGW_SendServer interface {
	Send(*MsgRsp) error
	Recv() (*MsgReq, error)
	grpc.ServerStream
}

type mGWSendServer struct {
	grpc.ServerStream
}

func (x *mGWSendServer) Send(m *MsgRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mGWSendServer) Recv() (*MsgReq, error) {
	m := new(MsgReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MGW_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MGW",
	HandlerType: (*MGWServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _MGW_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mgw/mgw.proto",
}

func init() { proto.RegisterFile("mgw/mgw.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0xd7, 0x49, 0x36, 0xdd, 0x9d, 0x42, 0x09, 0x73, 0x40, 0xa6, 0x42, 0x6c, 0x65, 0x2d,
	0x52, 0xc5, 0x21, 0xa0, 0xf2, 0x04, 0xc0, 0x22, 0x4e, 0xe1, 0xe0, 0x5d, 0x84, 0xc4, 0x2d, 0xab,
	0x0c, 0x56, 0x05, 0x89, 0x5d, 0xdb, 0x6c, 0xd4, 0x1b, 0x4f, 0xc0, 0x23, 0x70, 0xe0, 0x49, 0x51,
	0x9c, 0x44, 0x6d, 0x24, 0x0e, 0x1c, 0xb8, 0xcd, 0xfc, 0x9f, 0xe3, 0xf9, 0x92, 0x09, 0xdc, 0xaf,
	0x55, 0xfb, 0xa2, 0x56, 0x6d, 0x6e, 0xac, 0xf6, 0x7a, 0x09, 0xb7, 0xa5, 0xa3, 0xbe, 0x16, 0xbf,
	0x19, 0xa4, 0x85, 0x53, 0x92, 0x76, 0xb8, 0x80, 0x68, 0x5b, 0x71, 0xb6, 0x62, 0xeb, 0x73, 0x19,
	0x6d, 0x2b, 0xcc, 0x20, 0x2e, 0x8d, 0xe1, 0x51, 0x08, 0xba, 0x12, 0x05, 0xcc, 0x1c, 0x39, 0xb7,
	0xd5, 0x0d, 0x8f, 0x57, 0x6c, 0x3d, 0xdf, 0x9c, 0xe5, 0xd7, 0x7d, 0x2f, 0x47, 0x80, 0x4b, 0x88,
	0x6b, 0xa7, 0x78, 0x32, 0xf0, 0xc2, 0xa9, 0xab, 0xd2, 0x97, 0xb2, 0x0b, 0xf1, 0x09, 0x24, 0x5f,
	0xac, 0xae, 0xf9, 0xe9, 0x01, 0xbe, 0xae, 0x2a, 0x2b, 0x43, 0x8a, 0x1c, 0x22, 0xaf, 0x79, 0xba,
	0x8a, 0x27, 0x2c, 0xf2, 0x5a, 0xfc, 0x18, 0x24, 0x9d, 0xf9, 0x4f, 0x92, 0x1c, 0x66, 0x64, 0xed,
	0x5b, 0x5d, 0x51, 0x10, 0x7d, 0x28, 0xc7, 0x16, 0x1f, 0x41, 0x4a, 0xd6, 0x16, 0x4e, 0x05, 0xc9,
	0x73, 0x39, 0x74, 0xe2, 0x27, 0x03, 0x28, 0x54, 0x2b, 0x69, 0xf7, 0x9d, 0x9c, 0xc7, 0x4b, 0x48,
	0xfc, 0xde, 0x50, 0x10, 0x59, 0x6c, 0xb2, 0xfc, 0x80, 0xf2, 0x9b, 0xbd, 0x21, 0x19, 0x68, 0x37,
	0xc6, 0xbb, 0x0f, 0x65, 0xa3, 0x5d, 0x10, 0x4c, 0xe4, 0xd8, 0xe2, 0x05, 0xa4, 0x75, 0xf8, 0xea,
	0x83, 0xe3, 0x2c, 0xef, 0x97, 0x20, 0x87, 0x58, 0x5c, 0x40, 0xd2, 0x5d, 0x84, 0x73, 0x98, 0x7d,
	0x6c, 0xbe, 0x36, 0xba, 0x6d, 0xb2, 0x13, 0x84, 0x71, 0x57, 0x19, 0x13, 0xbf, 0x18, 0x9c, 0x15,
	0xaa, 0x7d, 0x77, 0x47, 0x8d, 0x47, 0x31, 0xd1, 0x59, 0xe4, 0x23, 0xf8, 0x37, 0x99, 0x1c, 0xe6,
	0xb5, 0x53, 0x57, 0xf4, 0x6d, 0x7b, 0x47, 0x76, 0xcf, 0x21, 0x18, 0xdd, 0x0b, 0xab, 0x1b, 0x32,
	0x79, 0x7c, 0x40, 0x5c, 0xfe, 0xcd, 0xed, 0x01, 0xcc, 0x8f, 0x1e, 0xc8, 0x40, 0xdc, 0x4c, 0x02,
	0x7c, 0x0c, 0xb1, 0xa5, 0x5d, 0x30, 0x3c, 0x7a, 0xdd, 0x2e, 0xc3, 0xe7, 0x90, 0x5a, 0x32, 0xda,
	0x7a, 0x1e, 0x85, 0xe5, 0xe3, 0x64, 0x74, 0x20, 0x72, 0x38, 0xb1, 0x79, 0x06, 0x71, 0xf1, 0xfe,
	0x13, 0x3e, 0x85, 0xe4, 0x9a, 0x9a, 0x0a, 0xc7, 0x8b, 0x96, 0x7d, 0xe1, 0x8c, 0x38, 0x59, 0xb3,
	0x97, 0xec, 0xcd, 0xe9, 0xe7, 0xb8, 0x56, 0xed, 0x6d, 0x1a, 0x7e, 0xf2, 0x57, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0xaa, 0xc1, 0xa1, 0x01, 0x03, 0x00, 0x00,
}
